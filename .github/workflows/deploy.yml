name: Deploy to Production

on:
  push:
    branches: [main, devOps] # Added devOps branch
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_FRONTEND: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/myblog/frontend
  ECR_BACKEND: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/myblog/backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # --- ADDED STEP ---
      # This step ensures the AWS CLI is installed and available.
      # It handles the case where it might already be present.
      - name: Ensure AWS CLI is installed and in PATH
        run: |
          if ! command -v aws &> /dev/null; then
            echo "AWS CLI not found, installing..."
            curl -sL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          else
            echo "AWS CLI is already installed."
            # If already installed, ensure the path is correct for this step's shell
            export PATH="/usr/local/aws-cli/v2/current/bin:$PATH"
          fi
          aws --version # Verify installation and availability in this step
      # --- END OF ADDED STEP ---
      - name: Build and push backend image
        run: |
          docker build -f apps/backend/Dockerfile -t $ECR_BACKEND:$GITHUB_SHA .
          docker tag $ECR_BACKEND:$GITHUB_SHA $ECR_BACKEND:latest
          docker push $ECR_BACKEND:$GITHUB_SHA
          docker push $ECR_BACKEND:latest

      - name: Build and push frontend image
        run: |
          docker build -f apps/frontend/Dockerfile \
            --build-arg NEXT_PUBLIC_BACKEND_BASE_URL=https://${{ secrets.DOMAIN_NAME }} \
            --build-arg NEXT_PUBLIC_GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
            --build-arg NEXT_PUBLIC_TINYMCE_API_KEY=${{ secrets.TINYMCE_API_KEY }} \
            -t $ECR_FRONTEND:$GITHUB_SHA .
          docker tag $ECR_FRONTEND:$GITHUB_SHA $ECR_FRONTEND:latest
          docker push $ECR_FRONTEND:$GITHUB_SHA
          docker push $ECR_FRONTEND:latest

      - name: Deploy to EC2 via SSM
        run: |
          echo "Verifying AWS CLI availability in deployment step..."
          command -v aws || { echo "ERROR: aws command not found in deployment step!"; exit 1; }
          aws --version
          echo "AWS CLI verified. Proceeding with deployment."

          # Get instance ID from EC2 public IP
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=ip-address,Values=${{ secrets.EC2_HOST }}" "Name=instance-state-name,Values=running" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text \
            --region ap-southeast-1)

          if [ -z "$INSTANCE_ID" ] || [ "$INSTANCE_ID" = "None" ]; then
              echo "Error: Could not find a running EC2 instance with IP ${{ secrets.EC2_HOST }}"
              exit 1
          fi

          echo "Found EC2 instance: $INSTANCE_ID"

          # Use simple inline SSM commands
          ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}" # Note: This might be empty if login failed, but login usually doesn't fail silently
          if [ -z "$ECR_REGISTRY" ]; then
              # Fallback to constructing registry from secrets if step output is empty
              ECR_REGISTRY="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          fi
          ECR_FRONTEND="${{ env.ECR_FRONTEND }}" # Use the environment variable
          ECR_BACKEND="${{ env.ECR_BACKEND }}"   # Use the environment variable

          # Simple SSM commands with direct environment variable substitution
          SSM_COMMANDS_JSON='["set -e", "echo Starting deployment...", "cd /home/ubuntu", "if ! command -v aws &> /dev/null; then apt-get update -y && apt-get install -y unzip curl && curl -sL \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o awscliv2.zip && unzip -q awscliv2.zip && ./aws/install --update && rm -rf aws awscliv2.zip; fi", "if ! command -v docker-compose &> /dev/null; then curl -L \"https://github.com/docker/compose/releases/download/v2.24.0/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose && chmod +x /usr/local/bin/docker-compose; fi", "if ! command -v git &> /dev/null; then apt-get install -y git; fi", "echo Cloning repository...", "rm -rf MyBlog", "git clone https://github.com/BlockAce01/MyBlog.git MyBlog", "cd MyBlog", "echo Creating environment file...", "cat > .env << EOF", "AWS_ACCOUNT_ID='"${{ secrets.AWS_ACCOUNT_ID }}"'", "MONGODB_URI='"'"'"${{ secrets.MONGODB_URI }}"'", "JWT_SECRET='"${{ secrets.JWT_SECRET }}"'", "GOOGLE_CLIENT_ID='"${{ secrets.GOOGLE_CLIENT_ID }}"'", "GOOGLE_CLIENT_SECRET='"${{ secrets.GOOGLE_CLIENT_SECRET }}"'", "ADMIN_SETUP_TOKEN='"${{ secrets.ADMIN_SETUP_TOKEN }}"'", "NEXTAUTH_SECRET='"${{ secrets.NEXTAUTH_SECRET }}"'", "NEXT_PUBLIC_TINYMCE_API_KEY='"${{ secrets.TINYMCE_API_KEY }}"'", "EOF", "echo Environment file created successfully", "echo Deploying containers...", "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com", "docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/myblog/frontend:latest", "docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/myblog/backend:latest", "docker-compose -f docker-compose.prod.yml down || true", "docker-compose -f docker-compose.prod.yml up -d", "echo Waiting for services...", "sleep 30", "docker ps", "echo Running health checks...", "curl -f http://localhost:3000/api/health && echo ✅ Frontend OK || echo ❌ Frontend failed", "curl -f http://localhost:3003/health && echo ✅ Backend OK || echo ❌ Backend failed", "echo 🎉 Deployment completed!"]'

          # Construct the full --parameters JSON object
          PARAMETERS_JSON="{\"commands\": $SSM_COMMANDS_JSON}"

          # Send SSM command with the constructed JSON
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters "$PARAMETERS_JSON" \
            --output text \
            --query 'Command.CommandId' \
            --region ap-southeast-1)

          if [ -z "$COMMAND_ID" ]; then
              echo "Error: Failed to send SSM command."
              exit 1
          fi

          echo "SSM Command sent. Command ID: $COMMAND_ID"

          # Wait for command to complete (increased timeout)
          echo "Waiting for deployment to complete (this may take several minutes)..."
          aws ssm wait command-executed \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --region ap-southeast-1 \
            --cli-read-timeout 600 \
            --cli-connect-timeout 60

          # Get command result
          RESULT=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --region ap-southeast-1 \
            --query 'Status' \
            --output text)

          echo "Deployment status: $RESULT"

          # Get command output for debugging
          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --region ap-southeast-1 \
            --query 'StandardOutputContent' \
            --output text

          if [ "$RESULT" = "Success" ]; then
            echo "✅ Deployment completed successfully!"
            echo "🌐 Application should be accessible at: https://${{ secrets.DOMAIN_NAME }}"
            echo "🔧 Direct access via IP: http://${{ secrets.EC2_HOST }}"
          else
            echo "❌ Deployment failed with status: $RESULT"
            echo "Error details:"
            aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "$INSTANCE_ID" \
              --region ap-southeast-1 \
              --query 'StandardErrorContent' \
              --output text
            exit 1
          fi
